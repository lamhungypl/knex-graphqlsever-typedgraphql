type Query {
  books: [Book!]!
  book: Book!
  users(info: ArgUserInfo!): [User!]!
  posts(
    """
    Paginate before opaque cursor
    """
    before: String

    """
    Paginate after opaque cursor
    """
    after: String

    """
    Paginate first
    """
    first: Float

    """
    Paginate last
    """
    last: Float
    orderBy: PostOrder
  ): PostConnection!
}

type Book {
  title: String!
  author: String!
}

type User {
  user_id: ID!
  username: String
  email: String
  created_at: String
  updated_at: String
  posts: [Post!]!
}

type Post {
  post_id: ID!
  title: String
  content: String
  created_at: String
  updated_at: String
  author: User
}

input ArgUserInfo {
  email: String = ""
  limit: Int = 20
  offset: Int = 0
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge!]!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PostEdge {
  node: Post

  """
  Used in `before` and `after` args
  """
  cursor: String
}

input PostOrder {
  updated_at: String!
}

type Mutation {
  changePassword(changePassInput: ChangePasswordInput!): User!
  login(payload: LoginInput!): AuthResponse!
  register(payload: RegisterInput!): User!
  updateUser(payload: UpdateInput!, userId: String!): User!
  deleteUser(userId: String!): User!
  addPost(payload: AddPostInput!): Post!
  updatePost(payload: UpdatePostInput!, postId: String!): Post!
  deletePost(postId: String!): Post!
}

input ChangePasswordInput {
  username: String!
  currentPass: String!
  newPass: String!
  confirmPass: String!
}

type AuthResponse {
  token: String!
  user: User!
}

input LoginInput {
  username: String!
  password: String!
}

input RegisterInput {
  username: String
  password: String
  email: String
}

input UpdateInput {
  email: String
}

input AddPostInput {
  post_id: ID!
  title: String
  content: String
}

input UpdatePostInput {
  title: String
  content: String
  author_id: ID
}
